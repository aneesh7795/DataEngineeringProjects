{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "AAdatafactoryproject"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SQLToDataLake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopySQLData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LastLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LatestLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM dbo.FactBookings\nwhere booking_date > '@{activity('LastLoad').output.firstRow.lastload}' and\nbooking_date <= '@{activity('LatestLoad').output.firstRow.latest_load}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LastLoad",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_lookup",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LatestLoad",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(booking_date) as latest_load\nfrom dbo.FactBookings",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Watermark",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopySQLData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "lastload",
										"value": {
											"value": "@activity('LatestLoad').output.firstRow.latest_load",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_empty_json",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_lookup",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_now": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-03T11:51:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_API_Ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebAPICall",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://raw.githubusercontent.com/anshlambagit/AnshLambaYoutube/refs/heads/main/ADF_Project/DimAirport.json"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebAPICall",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['airport_id']"
										},
										"sink": {
											"path": "$['airport_id']"
										}
									},
									{
										"source": {
											"path": "$['airport_name']"
										},
										"sink": {
											"path": "$['airport_name']"
										}
									},
									{
										"source": {
											"path": "$['city']"
										},
										"sink": {
											"path": "$['city']"
										}
									},
									{
										"source": {
											"path": "$['country']"
										},
										"sink": {
											"path": "$['country']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ds_rest_api",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_api_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-01T20:31:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_onprem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_onprem_file",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().p_file_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_silver_source",
								"type": "DatasetReference"
							},
							"name": "DimAirline"
						},
						{
							"dataset": {
								"referenceName": "ds_dimflightsourcesilver",
								"type": "DatasetReference"
							},
							"name": "DimFlight"
						},
						{
							"dataset": {
								"referenceName": "ds_DimPassanger_silver",
								"type": "DatasetReference"
							},
							"name": "DimPassanger"
						},
						{
							"dataset": {
								"referenceName": "ds_fact_source",
								"type": "DatasetReference"
							},
							"name": "FactBooking"
						},
						{
							"dataset": {
								"referenceName": "ds_airport_json_silver",
								"type": "DatasetReference"
							},
							"name": "DimAirport"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink3"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink4"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake",
								"type": "LinkedServiceReference"
							},
							"name": "sink5"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnCountry"
						},
						{
							"name": "selectColumns"
						},
						{
							"name": "selectGenderFlag"
						},
						{
							"name": "derivedgenderFlag"
						},
						{
							"name": "derivedgenderFlagFem"
						},
						{
							"name": "filtergreaterthan25"
						},
						{
							"name": "derivedRemoveNameSpace"
						},
						{
							"name": "castCost"
						},
						{
							"name": "derivedAirportNames"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "alterRow3"
						},
						{
							"name": "alterRow4"
						},
						{
							"name": "alterRow5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          airline_id as short,",
						"          airline_name as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimAirline",
						"source(output(",
						"          flight_id as short,",
						"          flight_number as string,",
						"          departure_time as string,",
						"          arrival_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimFlight",
						"source(output(",
						"          passenger_id as short,",
						"          full_name as string,",
						"          gender as string,",
						"          age as short,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimPassanger",
						"source(output(",
						"          booking_id as integer,",
						"          passenger_id as integer,",
						"          flight_id as integer,",
						"          airline_id as integer,",
						"          origin_airport_id as integer,",
						"          destination_airport_id as integer,",
						"          booking_date as date,",
						"          ticket_cost as decimal(10,2),",
						"          flight_duration_mins as integer,",
						"          checkin_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> FactBooking",
						"source(output(",
						"          airport_id as short,",
						"          airport_name as string,",
						"          city as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> DimAirport",
						"DimAirline derive(country = upper(country)) ~> derivedColumnCountry",
						"DimFlight select(mapColumn(",
						"          flight_id,",
						"          flight_number,",
						"          departure_timestamp = departure_time,",
						"          arrival_timestamp = arrival_time",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumns",
						"DimPassanger select(mapColumn(",
						"          passenger_id,",
						"          full_name,",
						"          genderFlag = gender,",
						"          age,",
						"          country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectGenderFlag",
						"selectGenderFlag derive(genderFlag = regexReplace(genderFlag,\"M\",\"Male\")) ~> derivedgenderFlag",
						"derivedgenderFlag derive(genderFlag = regexReplace(genderFlag,\"F\",\"Female\")) ~> derivedgenderFlagFem",
						"derivedgenderFlagFem filter(age > 25 && country != 'Mexico') ~> filtergreaterthan25",
						"filtergreaterthan25 derive(first_name = split(full_name, \" \")[1]) ~> derivedRemoveNameSpace",
						"FactBooking cast(output(",
						"          ticket_cost as integer",
						"     ),",
						"     errors: true) ~> castCost",
						"DimAirport derive(airport_name = lower(airport_name)) ~> derivedAirportNames",
						"derivedColumnCountry alterRow(upsertIf(1>0)) ~> alterRow1",
						"selectColumns alterRow(upsertIf(1>0)) ~> alterRow2",
						"derivedRemoveNameSpace alterRow(upsertIf(1>0)) ~> alterRow3",
						"castCost alterRow(upsertIf(1>0)) ~> alterRow4",
						"derivedAirportNames alterRow(upsertIf(1>0)) ~> alterRow5",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimAirline',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['airline_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimFlight',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['flight_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2",
						"alterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimPassanger',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['passenger_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink3",
						"alterRow4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'FactBooking',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['booking_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink4",
						"alterRow5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimAirport',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['airport_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink5"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SilverLayer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SilverDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataTransformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DimAirline": {},
									"DimFlight": {},
									"DimPassanger": {},
									"FactBooking": {},
									"DimAirport": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"sink5": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-04T20:50:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataTransformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_onprem_ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.file_name",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "MigrateOnPremFile",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"value": "@if(equals(item().file_name,'DimPassenger.csv'),pipeline().parameters.p_mapping_passenger,if(equals(item().file_name,'DimFlight.csv'),pipeline().parameters.p_mapping_flight,pipeline().parameters.p_mapping_airline))",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "ds_onprem",
											"type": "DatasetReference",
											"parameters": {
												"p_file_name": {
													"value": "@item().file_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_onpremsink_csv",
											"type": "DatasetReference",
											"parameters": {
												"p_filename": {
													"value": "@item().file_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_mapping_flight": {
						"type": "object",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "flight_id",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "flight_id",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "flight_number",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "flight_number",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "departure_time",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "departure_time",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "arrival_time",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "arrival_time",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					},
					"p_mapping_airline": {
						"type": "object",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "airline_id",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "airline_id",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "airline_name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "airline_name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "country",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "country",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					},
					"file_name": {
						"type": "array",
						"defaultValue": [
							{
								"file_name": "DimPassenger.csv"
							},
							{
								"file_name": "DimFlight.csv"
							},
							{
								"file_name": "DimAirline.csv"
							}
						]
					},
					"p_mapping_passenger": {
						"type": "object",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "passenger_id",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "passenger_id",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "full_name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "full_name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "gender",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "gender",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "age",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "age",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "country",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "country",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-01T19:16:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_onprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Parent_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteOnPrem",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_onprem_ingestion",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_mapping_flight": {
									"value": "@pipeline().parameters.p_mapping_flight",
									"type": "Expression"
								},
								"p_mapping_airline": {
									"value": "@pipeline().parameters.p_mapping_airline",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.file_name",
									"type": "Expression"
								},
								"p_mapping_passenger": {
									"value": "@pipeline().parameters.p_mapping_passenger",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteAPIPipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteOnPrem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_API_Ingestion",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecuteIncrementalIngestion",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteAPIPipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SQLToDataLake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FailureAlert",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ExecuteIncrementalIngestion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "https://lpadfproject.azurewebsites.net:443/api/wf_alerts/triggers/When_an_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_an_HTTP_request_is_received%2Frun&sv=1.0&sig=_iCVqIXHcOMQbDaxsyIhdDvDy4saZH6-vpqjh6q1p8E",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"pipeline\" :\"@{pipeline().Pipeline}\",\n    \"run_id\" :\"@{pipeline().RunId}\",\n    \"status\" : \"@{activity('ExecuteIncrementalIngestion').Status}\",\n    \"error_msg\" : \"@{if(equals(activity('ExecuteIncrementalIngestion').Status, 'Failed'), string(activity('ExecuteIncrementalIngestion').error),'No Error')}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"file_name": {
						"type": "array",
						"defaultValue": [
							{
								"file_name": "DimPassenger.csv"
							},
							{
								"file_name": "DimFlight.csv"
							},
							{
								"file_name": "DimAirline.csv"
							}
						]
					},
					"p_mapping_flight": {
						"type": "object",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "flight_id",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "flight_id",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "flight_number",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "flight_number",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "departure_time",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "departure_time",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "arrival_time",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "arrival_time",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					},
					"p_mapping_airline": {
						"type": "object",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "airline_id",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "airline_id",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "airline_name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "airline_name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "country",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "country",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					},
					"p_mapping_passenger": {
						"type": "object",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "passenger_id",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "passenger_id",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "full_name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "full_name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "gender",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "gender",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "age",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "age",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "country",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "country",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-04T10:48:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_onprem_ingestion')]",
				"[concat(variables('factoryId'), '/pipelines/pl_API_Ingestion')]",
				"[concat(variables('factoryId'), '/pipelines/SQLToDataLake')]"
			]
		}
	]
}