{
	"name": "DataServing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "DimAirline"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "DimFlight"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "FactBooking"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sinkGold"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sinkGoldViewCountry"
				}
			],
			"transformations": [
				{
					"name": "AirlineJoin"
				},
				{
					"name": "selectColums"
				},
				{
					"name": "aggregateAirlineName"
				},
				{
					"name": "Ranking"
				},
				{
					"name": "filterTopFive"
				},
				{
					"name": "joinFlight"
				},
				{
					"name": "selectColumns"
				},
				{
					"name": "joinAirline"
				},
				{
					"name": "RequiredColumns"
				},
				{
					"name": "aggregateByTotalCost"
				},
				{
					"name": "windowFor"
				},
				{
					"name": "filterTop6"
				},
				{
					"name": "alterRow"
				},
				{
					"name": "alterRowCountryRank"
				}
			],
			"scriptLines": [
				"source(output(",
				"          airline_id as short,",
				"          airline_name as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimAirline') ~> DimAirline",
				"source(output(",
				"          flight_id as short,",
				"          flight_number as string,",
				"          departure_timestamp as string,",
				"          arrival_timestamp as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimFlight') ~> DimFlight",
				"source(output(",
				"          booking_id as integer,",
				"          passenger_id as integer,",
				"          flight_id as integer,",
				"          airline_id as integer,",
				"          origin_airport_id as integer,",
				"          destination_airport_id as integer,",
				"          booking_date as date,",
				"          ticket_cost as integer,",
				"          flight_duration_mins as integer,",
				"          checkin_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'FactBooking') ~> FactBooking",
				"FactBooking, DimAirline join(FactBooking@airline_id == DimAirline@airline_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> AirlineJoin",
				"AirlineJoin select(mapColumn(",
				"          booking_id,",
				"          passenger_id,",
				"          flight_id,",
				"          airline_id = FactBooking@airline_id,",
				"          origin_airport_id,",
				"          destination_airport_id,",
				"          booking_date,",
				"          ticket_cost,",
				"          flight_duration_mins,",
				"          checkin_status,",
				"          airline_name,",
				"          country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColums",
				"selectColums aggregate(groupBy(airline_name),",
				"     Total_Sales = sum(ticket_cost)) ~> aggregateAirlineName",
				"aggregateAirlineName window(desc(Total_Sales, true),",
				"     Ranking = denseRank()) ~> Ranking",
				"Ranking filter(Ranking<6) ~> filterTopFive",
				"FactBooking, DimFlight join(FactBooking@flight_id == DimFlight@flight_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFlight",
				"joinFlight select(mapColumn(",
				"          booking_id,",
				"          passenger_id,",
				"          flight_id = FactBooking@flight_id,",
				"          airline_id,",
				"          origin_airport_id,",
				"          destination_airport_id,",
				"          booking_date,",
				"          ticket_cost,",
				"          flight_duration_mins,",
				"          checkin_status,",
				"          flight_number,",
				"          departure_timestamp,",
				"          arrival_timestamp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns",
				"selectColumns, DimAirline join(selectColumns@airline_id == DimAirline@airline_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinAirline",
				"joinAirline select(mapColumn(",
				"          booking_id,",
				"          passenger_id,",
				"          flight_id,",
				"          airline_id = selectColumns@airline_id,",
				"          origin_airport_id,",
				"          destination_airport_id,",
				"          booking_date,",
				"          ticket_cost,",
				"          flight_duration_mins,",
				"          checkin_status,",
				"          flight_number,",
				"          departure_timestamp,",
				"          arrival_timestamp,",
				"          airline_name,",
				"          country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RequiredColumns",
				"RequiredColumns aggregate(groupBy(country),",
				"     Total_Sales = sum(ticket_cost)) ~> aggregateByTotalCost",
				"aggregateByTotalCost window(desc(Total_Sales, true),",
				"     Rank = denseRank()) ~> windowFor",
				"windowFor filter(Rank <7) ~> filterTop6",
				"filterTopFive alterRow(insertIf(1<2)) ~> alterRow",
				"filterTop6 alterRow(insertIf(1==1)) ~> alterRowCountryRank",
				"alterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'BusinessView',",
				"     overwrite: true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     keys:['airline_name'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkGold",
				"alterRowCountryRank sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'BusinessViewTopCountry',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkGoldViewCountry"
			]
		}
	}
}